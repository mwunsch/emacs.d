#+TITLE: My Emacs Configuration
#+AUTHOR: Mark Wunsch
#+OPTIONS: toc:2

* Introduction

These are my Emacs customizations. I am in the process of learning and using Emacs as my primary text editor (amongst all the other things that Emacs seems to do for you).

** System Requirements

Installed via Homebrew:
- ~cmake~ and ~libtool~ - Required for vterm compilation
- ~ghostscript~ - Required for PDF rendering
- ~git~ - Required for tree-sitter grammar compilation

* Philosophy

The important thing to understand is that learning Emacs isn't just learning the particulars of a text editor. Learning Emacs means learning a framework written in Emacs Lisp that is all about taking actions on buffers of text. Learning the Emacs basics are important, but that only scratches the surface of the different interaction modes.

My configuration follows the philosophy of [[https://github.com/technomancy/better-defaults][better-defaults]] - starting simple and adding functionality as needed, rather than using a large framework like Spacemacs or Doom Emacs.

* Current Setup

** Package Management
- Uses ~use-package~ for declarative package configuration
- Configured with MELPA, Org, and GNU ELPA repositories

** Core Packages

*** Editor Enhancements
- [[https://github.com/technomancy/better-defaults][better-defaults]] - Sensible defaults for Emacs
- [[https://github.com/justbur/emacs-which-key][which-key]] - Discover keybindings as you type
- [[https://www.emacswiki.org/emacs/InteractivelyDoThings][ido-mode]] - Enhanced minibuffer completion
- [[https://github.com/DarwinAwardWinner/ido-completing-read-plus][ido-completing-read+]] - Ido everywhere
- [[https://github.com/creichert/ido-vertical-mode.el][ido-vertical-mode]] - Vertical display for Ido
- ~global-auto-revert-mode~ - Automatically reload files when changed on disk

*** Appearance
- [[https://github.com/doomemacs/themes][doom-themes]] - Modern color themes (using doom-one)
- [[https://github.com/hlissner/emacs-solaire-mode][solaire-mode]] - Visual distinction between code and UI buffers
- [[https://github.com/seagle0128/doom-modeline][doom-modeline]] - Clean, informative modeline
- [[https://github.com/emacsorphanage/anzu][anzu]] - Search match count display
- *Font*: SF Mono at 12.4pt (when available)

*** Project & Version Control
- [[https://github.com/bbatsov/projectile][projectile]] (~C-c p~) - Project management and navigation
- [[http://magit.vc/][magit]] - Git interface
- [[https://github.com/defunkt/gist.el][gist]] - GitHub gist integration
- [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] - Inherit shell environment (important on macOS, optimized for fast startup)
- [[https://github.com/wbolster/emacs-direnv][direnv]] - Automatically load direnv environments (essential for nix/devenv projects)

*** Development Tools
- ~eglot~ (built-in) - Language Server Protocol support using standard Emacs bindings
- ~flymake~ (built-in, ~M-g n/p~) - On-the-fly syntax checking, displays LSP diagnostics
- ~tree-sitter~ (built-in) - Advanced syntax highlighting and code navigation (Emacs 30)
- [[http://company-mode.github.io/][company-mode]] - In-buffer completion
- [[https://github.com/akermu/emacs-libvterm][vterm]] - Terminal emulator
- [[https://github.com/manzaltu/claude-code-ide.el][claude-code-ide]] (~C-c C-'~) - Claude AI integration

*** Language Support

**** TypeScript/TSX
- Uses built-in ~typescript-ts-mode~ with tree-sitter (Emacs 30)
- Automatically compiles and installs tree-sitter grammars from source on first use
- Eglot provides LSP features (go-to-definition, find-references, completion, diagnostics)
- *Requires*: ~npm install -g typescript-language-server typescript~

**** Ruby
- [[https://github.com/nonsequitur/inf-ruby][inf-ruby]] - REPL integration
- [[https://github.com/hron/yari.el][yari]] - Documentation lookup

**** Rust
- [[https://github.com/rust-lang/rust-mode][rust-mode]] - Rust language support

**** Nix
- [[https://github.com/NixOS/nix-mode][nix-mode]] - Nix expression editing

**** Lisp
- [[https://www.emacswiki.org/emacs/ParEdit][paredit]] - Structural editing for Lisp and Scheme

**** Docker
- [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] - Dockerfile syntax
- [[https://github.com/Silex/docker.el][docker]] - Docker management

**** Document Formats
- [[https://depp.brause.cc/nov.el/][nov.el]] - EPUB reader

**** AI Assistant
- [[https://github.com/karthink/gptel][gptel]] - ChatGPT/Claude interface

* Key Bindings Reference

** Essential Emacs
| Key       | Command                 | Description               |
|-----------+-------------------------+---------------------------|
| ~C-h t~   | help-with-tutorial      | Emacs tutorial            |
| ~C-h a~   | apropos-command         | Search for command        |
| ~C-h m~   | describe-mode           | Current mode help         |
| ~C-h k~   | describe-key            | Describe key binding      |
| ~C-h .~   | display-local-help      | Help at point             |

** Project Management (Projectile)
| Key       | Command                    | Description               |
|-----------+----------------------------+---------------------------|
| ~C-c p f~ | projectile-find-file       | Find file in project      |
| ~C-c p p~ | projectile-switch-project  | Switch project            |
| ~C-c p s~ | projectile-grep            | Search in project         |

** Flymake (Syntax Checking)
| Key       | Command                      | Description               |
|-----------+------------------------------+---------------------------|
| ~M-g n~   | flymake-goto-next-error      | Jump to next error        |
| ~M-g p~   | flymake-goto-prev-error      | Jump to previous error    |
| ~C-h .~   | display-local-help           | Show error at point       |
| ~M-x~     | flymake-show-buffer-diagnostics | List all errors        |

** Eglot (LSP)
| Key         | Command                | Description               |
|-------------+------------------------+---------------------------|
| ~M-.~       | xref-find-definitions  | Go to definition          |
| ~M-?~       | xref-find-references   | Find references           |
| ~M-,~       | xref-go-back           | Go back                   |
| ~C-h .~     | eldoc-doc-buffer       | Show documentation        |
| ~C-c r~     | eglot-rename           | Rename symbol             |
| ~C-c a~     | eglot-code-actions     | Execute code action       |
| ~C-c f~     | eglot-format           | Format buffer/region      |

** Other Tools
| Key       | Command                 | Description               |
|-----------+-------------------------+---------------------------|
| ~M-x magit-status~ | magit-status   | Git status                |
| ~C-c C-'~ | claude-code-ide-menu    | Claude Code menu          |

* Learning Resources

** Books & Guides
- [[https://www.masteringemacs.org/][Mastering Emacs]] by Mickey Petersen - Comprehensive guide
- [[https://github.com/chrisdone/elisp-guide][Emacs Lisp Guide]] by Chris Done

** Community Resources
- http://emacslife.com/
- http://planet.emacsen.org/
- http://orgmode.org/

** Configuration Examples
People whose configs I've learned from:
- https://github.com/flyingmachine/emacs.d
- https://github.com/bodil/emacs.d
- https://github.com/magnars/.emacs.d
- https://github.com/howardabrams/dot-files (uses Literate Programming in Org-mode)
- https://github.com/bbatsov/prelude
- https://github.com/bodil/ohai-emacs

** Key Advice
The key is to keep ~C-h a~ (pattern-matching help) and ~C-h m~ close at hand. ~C-h~ everything!

* Future Enhancements

Some things I'm considering adding:
- More language modes as needed
- Org-mode configuration for note-taking and planning
- Custom keybindings as I discover my workflow patterns
- Performance optimizations (compile, lazy loading tweaks)

Eventually, I'll get the hang of it.
